typedef struct stack_s
{
        int n;
        struct stack_s *prev;
        struct stack_s *next;
} stack_t;

typedef struct instruction_s
{
        char *opcode;
        void (*f)(stack_t **stack, unsigned int line_number);
} instruction_t;

int main(int argc, char **argv)
{
    int exit_status;
    FILE *fileptr;
    exit_status = 0;
    if (argc != 2)
       return(err_arg());

    fileptr = fopen(argv[1], "r");
    /* Check if the file was opened successfully */
    if (fileptr == NULL)
        return (err_open_file(argv[1]));
    
    exit_status = monty(fileptr);
    fclose(fileptr);
    return (exit_status);
}

int monty(FILE *fileptr)
{
    size_t bufsize;
    int line_num;
    stack_t **stack;
    char *input, *opcode;
    void (*operation)(stack_t **, unsigned int);
    bufsize = 0;
    line_num = 0;
    stack = NULL;
    /* Initialize stack */
    if (start_stack(stack) == EXIT_FAILURE)
        return (err_malloc());

    while (getline(&input, &bufsize, fileptr) != -1)
    {
        /* Line numbers always start at 1 */
        line_num++;
        /* Get the first opcode */
        opcode = strtok(input, " \n\t\a\b");

        if (opcode == NULL)
        {
            if (empty_line(input))
                continue;
            free_stack(stack);
            return(err_malloc());
        }
        /* value = strtok(NULL, " \n\t\a\b");*/

        free(input);

        operation = handle_opcode(opcode);
        if (operation == NULL)
            return (err_invalid_instr(line_num, opcode));

        operation(stack, line_num);
    }
    free(input);
    return (0);
}

void (*handle_opcode(char *str))(stack_t**, unsigned int)
{
	instruction_t fun_list[] = {
		{"push", my_push},
		{NULL, NULL}};
	int i;

	i = 0;
	while (fun_list[i].opcode)
	{
		if (strcmp(fun_list[i].opcode, str) == 0)
			return (fun_list[i].f);
		i++;
	}
	return (NULL);
}
void my_push (__attribute__((unused)) stack_t **stack, __attribute__((unused)) unsigned int line_number)
{
    printf("my push function");
}
int start_stack(stack_t **stack)
{
    stack_t *new_node;
    new_node = (stack_t *)malloc(sizeof(stack_t));
    if (new_node == NULL)
        return(err_malloc());

    new_node->next = NULL;
    new_node->next = NULL;
    new_node->n = 0;
    *stack = new_node;

    return(0);
}

void free_stack(stack_t **stack)
{
    stack_t *tmp;
    tmp = *stack;
    while(*stack)
    {
        tmp = (*stack)->next;
        free(*stack);
        *stack = tmp;
    }
}